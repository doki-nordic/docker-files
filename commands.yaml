#
# List of commands that will give you access to my-dockers containers.
#
# command_name: # This command will be available directly in the terminal.
#   dockerfile: relative/path/to.Dockerfile
#   share:
#     # Optional. Can be also one string value instead of list.
#     # The path will be mounted in docker at the same location as
#     # in the host.
#     - /path/to/shared/directory
#     - /second/shared/directory
#   append: |
#     # Optional. String or list of strings that will be appended to
#     # the end of Dockerfile. You can customize the docker with it.
#     RUN git config --global user.name "Mona Lisa" && \\
#         git config --global user.email Mona.Lisa@example.com
#   options:
#     # An object containing docker container run options.
#     # See https://docker-py.readthedocs.io/en/stable/containers.html#docker.models.containers.ContainerCollection.run
#     mem_limit: 2g
#   prompt:
#     # Ask user for input before building the image. Key is the argument passed to the
#     # Dockerfile, value is a prompt message that user will see.
#     DOWNLOAD_URL: Provide download URL
#   password:
#     # Ask user for password before building the image. Key is the secret id passed to the
#     # Dockerfile, value is a prompt message that user will see.
#     # Use "RUN --mount=type=secret" to get access to the secret.
#     TOKEN: User token
#   postbuild: |
#     # Execute bash script after building the image. Available environment variables:
#     # - MY_DOCKERS_COMMAND     The image is build for this my-dockers command.
#     # - MY_DOCKERS_DOCKERFILE  The Dockerfile used.
#     # - MY_DOCKERS_CONFIG      The "commands.yaml" file that contains this configuration.
#     # - MY_DOCKERS_TAG         The output image tag.
#     # - PROMPT_*               The value from "prompt" input.
#     # - PASSWORD_*             The value from "password" input.
#     # The current directory is not changed when script is executed.
#     # If you want to make some changes to the image, create container from
#     # $MY_DOCKERS_TAG image, execute commands in it and commit back as $MY_DOCKERS_TAG,
#     $ for example:
#     docker run --name tmp-cnt $MY_DOCKERS_TAG bash -c 'echo echo Docker started >> ~/.bashrc'
#     docker commit tmp-cnt tmp-img
#     docker container rm tmp-cnt
#     docker rmi $MY_DOCKERS_TAG
#     docker tag tmp-img $MY_DOCKERS_TAG
#     docker rmi tmp-img
#   prebuild: |
#     # The same as "postbuild", but before the build.
#     echo Starting image build...
#
# WARNING!!! After modifying command names, remember to do update with
# the following command:
#
#     my-dockers
#


docs-zephyr:
  dockerfile: /home/doki/work/zephyr/docs-zephyr.Dockerfile
  append: |
    RUN --mount=type=bind,target=/home/doki/work/zephyr/zephyr/doc/requirements.txt,source=./zephyr/doc/requirements.txt \
    pip install -r /home/doki/work/zephyr/zephyr/doc/requirements.txt
    WORKDIR /home/doki/work/zephyr
  share: /home/doki/work/zephyr
  options:
    mem_limit: 5g
    memswap_limit: 5g
    cpuset_cpus: 0-3

ncs:
  dockerfile: ncs.Dockerfile
  options:
    mem_limit: 5g
    memswap_limit: 5g
    network_mode: host
    environment:
      - DISPLAY=:0
  password:
    FILES_NORDICSEMI_COM_TOKEN: Artifactory token
  prebuild: |
    `dirname $MY_DOCKERS_DOCKERFILE`/utils/ncs-req.sh
  append: |
    RUN --mount=type=cache,target=/home/$UN/.cache/pip,sharing=locked \
      --mount=type=bind,target=/home/$UN/req,source=./_tmp/req \
      sudo chmod 777 /home/$UN/.cache/pip && \
      pip install -r req/z/requirements.txt -r req/n/requirements.txt
  postbuild: |
    docker run --privileged -v /dev/bus/usb/:/dev/bus/usb --name tmp-cnt $MY_DOCKERS_TAG \
      bash -c 'wget --post-data accept_license_agreement=accepted https://www.segger.com/downloads/jlink/JLink_Linux_V798i_x86_64.deb && sudo apt update && sudo DEBIAN_FRONTEND=noninteractive apt install -y -qq $PWD/JLink_Linux_V798i_x86_64.deb --fix-broken && rm JLink_Linux_V798i_x86_64.deb'
    docker commit tmp-cnt tmp-img
    docker container rm tmp-cnt
    docker rmi $MY_DOCKERS_TAG
    docker tag tmp-img $MY_DOCKERS_TAG
    docker rmi tmp-img
  share:
    - /tmp/.X11-unix
    - /home/doki/work

playgr:
  dockerfile: playgr.Dockerfile
  share:
    - /tmp/.X11-unix
    - /home/doki/work

docker-example:
  dockerfile: scripts/example.Dockerfile
  share: /home/doki/my-dockers-example

spidermonkey:
  dockerfile: /home/doki/my/spidermonkey-sandbox/sandbox/scripts/Dockerfile
  options:
    network_mode: host
    environment:
      - DISPLAY=:0
  share:
    - /tmp/.X11-unix
    - /home/doki/my/spidermonkey-sandbox
  append: |
    ARG UN
    ARG UI
    ARG GN
    ARG GI
    RUN groupadd -g $GI $GN && \
      useradd -s `which bash` -m -g $GI -G adm,dialout,cdrom,sudo,dip,plugdev -u $UI $UN && \
      echo "$UN ALL=(ALL:ALL) NOPASSWD: ALL" > /etc/sudoers.d/$UN
    USER $UN:$GN
    WORKDIR /home/$UN
    ENV PATH=$PATH:/home/$UN/.local/bin:/usr/local/nvm/versions/node/v18.20.4/bin
    RUN mkdir -p /home/$UN/.local/bin && \
      mkdir -p /home/$UN/.cache

#     RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash && \
#       export NVM_DIR=/home/$UN/.nvm && \
#       . $NVM_DIR/nvm.sh && \
#       nvm install 18
#     RUN export PATH=$PATH:`echo /home/doki/.nvm/versions/node/v18*`/bin && \
#       echo PATH="\$PATH:$PATH" >> /home/$UN/.profile
